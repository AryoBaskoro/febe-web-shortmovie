services:
  frontend:
    build:
      context: ./web-shortmovie-frontend
      dockerfile: Dockerfile
    image: aryobskoro/mulmed-frontend:latest
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - backend_network
  
  backend:
    build:
      context: ./web-shortmovie-backend
      dockerfile: Dockerfile
    image: aryobskoro/mulmed-backend:latest
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_PASSWORD=${DB_PASS}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network
    env_file:
      - .env
    restart: on-failure

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 5

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:


